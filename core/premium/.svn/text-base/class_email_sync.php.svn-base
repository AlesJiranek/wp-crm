<?php
/*
Name: Email Synchronizer
Class: class_email_sync
Version: 0.1
Description: Syncronize e-mails from multiple e-mail accounts.
*/

add_action('wp_crm_init', array('class_email_sync', 'init'));




/**
 * class_email_sync Class
 *
 *
 * Copyright 2010 Andy Potanin, TwinCitiesTech.com, Inc.  <andy.potanin@twincitiestech.com>
 *
 * @version 1.0
 * @author Andy Potanin <andy.potanin@twincitiestech.com>
 * @package WP-CRM
 * @subpackage Email Synchronizer
 */
class class_email_sync {

  var $hostname = '{imap.gmail.com:993/imap/ssl/novalidate-cert}';
  var $mailboxes;
  var $skipped_mailboxes = array('[Gmail]/Trash', '[Gmail]/Spam');
  var $max_body = 1000;


  /**
   * Init level functions for email syncronziation management
   *
   * @version 1.0
   * Copyright 2010 Andy Potanin, TwinCitiesTech.com, Inc.  <andy.potanin@twincitiestech.com>
   */
  function init() {

    if(function_exists('imap_open'))
      add_action('wp_crm_user_activity_history_top', array('class_email_sync', 'user_activity_history_top'));
      
    add_action('wp_ajax_wp_crm_email_sync', array('class_email_sync', 'email_sync'));
    add_action('wp_crm_settings_email_tab', array('class_email_sync', 'settings_email_tab'));
    
    add_filter('wp_crm_activity_single_content', array('class_email_sync', 'clean_up_email'), 0, 3);
    
   // add_action('wp_crm_metabox_special_actions', array('class_email_sync', 'special_actions_metabox'));
    
  }
  
  
  function special_actions_metabox($user_object) {
 
  
  }


  function email_sync() {
    global $wpdb;
    
    $user_id = $_REQUEST['user_id'];
    
    $user_object = wp_crm_get_user($user_id);
    $user_email = $user_object->user_email[0]['value'];
    
    $accounts = class_email_sync::email_accounts();
    $import_count = 0;
    
 
    foreach($accounts as $importer_id => $account) {
      $email_check = new class_email_sync();
      $email_check->username = $account['user_email'];
      $email_check->password = $account['user_password'];
      
      $email_check->get_mailbox('[Gmail]/All Mail', 'sent', $user_email);
      $email_check->get_mailbox('[Gmail]/All Mail', 'received', $user_email);

      
      $email_check->import_emails();
                
      if($email_check->emails) {
        foreach($email_check->emails as $single_email) {
      
          $wpdb->insert($wpdb->crm_log, array(
            'object_id' => $user_id,
            'object_type' => 'user',
            'user_id' => $importer_id,
            'subject' => $single_email['subject'],
            'email_to' => $single_email['email_to'],
            'email_from' => $single_email['email_from'],
            'email_references' => $single_email['email_references'],
            'msgno' => $single_email['msgno'],
            'time' => date('Y-m-d H:i:s', $single_email['timestamp']),
            'text' => $single_email['body']
           ));
               
               
            $import_count++;
        
        }
      
      }
       
      
 
 
    imap_close($email_check->inbox);
 
    
    }
    
    echo json_encode(
      array(
        'success' => 'true', 
        'import_count' => $import_count
       )
     );


    // Import Emails into database

    
    die();
  }
  
   function get_mailbox($name = 'INBOX', $type = 'sent', $query = false) {

 
      $this->inbox = imap_open($this->hostname . $name,$this->username,$this->password);

      if(!$this->inbox) {
        echo "Cannot connect. " . imap_last_error();
        return false;
      }

      if(!empty($query)) {
        if($type == 'sent') {
          $emails = imap_search($this->inbox,'ALL TO "'.$query.'"');
        }

        if($type == 'received') {
          $emails = imap_search($this->inbox,'ALL FROM "'.$query.'"');
        }

        if($type == 'body') {
          $emails = imap_search($this->inbox,'ALL BODY "'.$query.'"');
        }

      } else {
        $emails = imap_search($this->inbox,'ALL');
      }
      
  

      if(!$emails)
        $emails = array();
        
      $this->email_ids = array_merge($emails, $emails);


      
      return false;

    }

 function import_emails($emails = false) {
 
 
 
    $emails = $this->email_ids;
    
      if($emails) {
      
         /* for every email... */
        foreach($emails as $email_number) {

          /* get information specific to this email */
          $overview = imap_fetch_overview($this->inbox,$email_number,0);
          $message = imap_fetchbody($this->inbox,$email_number,1);
             

          unset($data);
 
          $data[mailbox] = $this->username;
          $data[email_to] = $overview[0]->to;
          $data[email_from] = $overview[0]->from;
          $data[subject] = $overview[0]->subject;
          $data[timestamp] = strtotime($overview[0]->date);
          $data[email_references] = $overview[0]->references;
          $data[msgno] = $overview[0]->msgno;
          $data[body] = $this->FixText($message);


          $this->emails[$data['msgno']] = $data;
        }
 

      }
      
 
      
   }
   
   function clean_up_email($email_body, $email_obj) {
   
   if(empty($email_obj->msgno))
      return $email_body;
   
    $truncate_after = array(
    'On Mon,',
    'On Tue,',
    'On Wed,',
    'On Thu,',
    'On Fri,',
    'On Sat,',
    'On Sun,',
    '----- Forwarded Message -----',
    '-----Original Message-----',
    '----- Original Message -----');

    $email_body = class_email_sync::truncate_email($email_body, $truncate_after);

    $remove_elements = array(
     'Content-Type: text/plain;',
    '--NextPart_Webmail_9m3u9jl4l_7198_1224273490_1',
    'Content-Type: text/plain',
    'charset=ISO-8859-1',
    '--NextPart_Webmail_9m3u9jl4l_15361_1224273000_1',
    '=20',
    'Content-Transfer-Encoding: 8bit'
    );

    $email_body = str_replace($remove_elements, "", $email_body);

    $email_body = str_replace("=0A", "\n", $email_body);
    $email_body = str_replace("=A0", " ", $email_body);
    $email_body = str_replace("=2E", ", ", $email_body);
    $email_body = str_replace("=\r\n", "", $email_body);
    $email_body = str_replace("=2C", ", ", $email_body);


    return "<div class='email_header'>Subject: {$email_obj->subject}<br />To: {$email_obj->email_to} <br />From: {$email_obj->email_from} </div><div class='email_body'>". $email_body . "</div><br />";

   

  }
   

   function truncate_email($email_body, $what) {
  
    if(empty($what))
      return $email_body;
  
    if(!is_array($what))
      $what = array($what);
      
      
    $strlen = strlen($email_body);
    
      
      foreach($what as $kill_text) {
         
         $email_body = str_replace($kill_text, '<div class="truncated"><!-- begin truncation --><input type="button" class="button wp_crm_truncated_show_hidden" value="Toggle Truncated"><div class="truncated_content">' . $kill_text, $email_body) . "</div></div> <!-- end truncation -->";
        
        
      /*
      // truncate everything after ----- Original Message -----        
      $position = strpos($email_body, "----- Original Message -----");
      if(!empty($position) && $position != '0')
        $email_body = substr($email_body,0,$position);

      }
      */
      
      
      
        
    }
    
    return $email_body;

  }
  
  /**
   * Get array of email accounts on this site that have IMAP account information
   *
   * @version 1.0
   * Copyright 2010 Andy Potanin, TwinCitiesTech.com, Inc.  <andy.potanin@twincitiestech.com>
   */
  function email_accounts() {
    global $wpdb;
    
    $email_boxes = $wpdb->get_col("SELECT user_id FROM {$wpdb->usermeta} WHERE meta_key = 'administrator_options_load_emails' and meta_value = 'on' ");
    echo $wpdb->last_query;
    if(empty($email_boxes))
      return false;
      
    foreach($email_boxes as $user_id) {
      //$user_object = wp_crm_get_user($user_id);
      $users[$user_id]['user_email'] = $user_object->user_email[0]['value'];
      $users[$user_id]['user_password'] = $wpdb->get_var("SELECT meta_value FROM {$wpdb->users} WHERE user_id = $user_id and meta_key = 'user_password'");
    }
 
 
    if($users)
      return $users;    
  
  }

  function settings_email_tab() {
 
  }
  
  

  function user_activity_history_top($object) {
    $last_sync = get_user_meta($object->ID[0]['value'], 'last_sync', true);
    
    if(!$object->ID[0]['value'])
      return;
  ?>
    <script type="text/javascript">
      jQuery(document).ready(function() {

        jQuery("#wp_crm_get_all_emails").click(function() {
        
            jQuery(this).val('Loading...');
            jQuery(this).attr('disabled', true);
 
            jQuery.post(ajaxurl, {action:'wp_crm_email_sync', user_id: <?php echo $object->ID[0]['value']; ?>},function(response) {

                if(response.success == 'true') {
                  wp_crm_update_activity_stream();
                  jQuery("#wp_crm_get_all_emails").val('Import and Sync Emails');
                  jQuery("#wp_crm_get_all_emails").attr('disabled', false);
                  
                } else {
                  jQuery("#wp_crm_get_all_emails").val('Import and Sync Emails');
                  jQuery("#wp_crm_get_all_emails").attr('disabled', false);
                  alert('Could not get emails.');
                }   


            }, "json");

        });

      });
    </script>
 
    <div class="alignright">
    <div class="wp_crm_last_sync"><?php echo ($last_sync ? "Last Sync: $last_sync" : 'Never synced.'); ?></div>
    <input type="button" id="wp_crm_get_all_emails" class="button" value="<?php _e('Import and Sync Emails', 'wp_crm'); ?>">
    </div>
 
 
    <?php
  }




  function get_mailboxes( ){


      $conx = imap_open("{imap.gmail.com:993/imap/ssl/novalidate-cert}", $this->username, $this->password);

      if(!$conx)
        return false;

      $folders = imap_listmailbox($conx, "{imap.gmail.com:993}", "*");

      if(!$folders)
        return false;

      foreach($folders as $folder) {
        $clean_name = str_replace('{imap.gmail.com:993}', '', $folder);

        // Skip over certain maiboxes
        if(in_array($clean_name, $this->skipped_mailboxes))
          continue;

        $mailboxes[] = $clean_name;
      }


      $this->mailboxes = $mailboxes;
      return $mailboxes;

    }


 
    function subval_sort($a,$subkey, $sort) {
      foreach($a as $k=>$v) {
        $b[$k] = strtolower($v[$subkey]);
      }
      $sort($b);
      foreach($b as $key=>$val) {
        $c[] = $a[$key];
      }
      return $c;

    }



    function FixText($text) {


    $remove_stuff = array(
      "Content-Type: text/plain;",
      "charset=ISO-8859-1",
      "=20",
      "<br>",
      "=\n");


    $text = str_replace($remove_stuff, "", $text);

    //echo $text;
    // Change to the number of characters you want to display

        $chars = $this->max_body;
        $text = $text." ";
        $text = substr($text,0,$chars);
        $text = substr($text,0,strrpos($text,' '));
        $text = $text."...";
        return $text;
    }
}


?>